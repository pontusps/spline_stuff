plot(dat$t,dat$y, type = 'l', ylim = c(0,25),xlab = 'time',ylab = 'tac'  )
#points(dat$t,predict(gam.fit), type = 'l' , col = 'red')
points(dat.exl$t,predict(gam.fit.maxknots), type = 'l' , col = 'blue')
points(dat$t,dat$y.noise, col = 'grey')
legend(x = 65,y = 24, legend=c("true", "spline build-in fun max knots"), col=c("black","blue"), lty=1, bty="n", cex = 0.75)
gam.fit.maxknots$sp
### CV-looc grid search
#CV.looc.gridsearch <- function(dat){
knot.grid <- seq(from = 5, to = 30, by = 1 )
lamda.grid <- 0.0001 * 10^(seq(0,10,length.out = 100) )
RSS.out <- NULL
for (k in 1:length(knot.grid) ){
knots = knot.grid[k]
RSS <- NULL
for(i in 1:length(lamda.grid)){
res.loo <- NULL
for (p in 1:length(dat.exl$t)){
loo.point <- dat.exl$t[p]
dat.loo <- dat.exl %>%
filter(t != loo.point)
gam.fit <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = knots)),
sp= lamda.grid[i] ,
data = dat.loo)
res.loo[p] <- dat.exl$y.noise[p] - predict(gam.fit,newdata = tibble(t = loo.point) )
}
RSS[i] <- sum(res.loo^2)
}
RSS.out <- cbind(RSS.out,RSS)
print(k)
}
rownames(RSS.out) <- paste0('lambda_',lamda.grid)
colnames(RSS.out) <- paste0('knot_',knot.grid)
saveRDS(object = RSS.out, file = './DerivedData/RSS_for_heatmap_rapidInflux.rds')
saveRDS(object = RSS.out, file = './DerivedData/RSS_for_heatmap_rapidInflux.rds')
setwd('/Users/pontus.sigray/Github/spline_stuff')
saveRDS(object = RSS.out, file = './DerivedData/RSS_for_heatmap_rapidInflux.rds')
RSS.out <-readRDS(file = './DerivedData/RSS_for_heatmap_rapidInflux.rds')
RSS.out <-readRDS(file = './DerivedData/RSS_for_heatmap_rapidInflux.rds')
#knitr::opts_chunk$set(echo = FALSE) #'echo = False' hides *all* code chunks below when knitted
knitr::opts_chunk$set(warning = FALSE) #'warning = F' hides *all* warnings messages below when knitted
knitr::opts_chunk$set(message = FALSE) #'message = F' hides *all* messages below when knitted
#set path to the parent folder of the project
knitr::opts_knit$set(root.dir = normalizePath("/Users/pontus.sigray/Github/spline_stuff/"))
#load packages (install from CRAN unless otherwise specified)
library(kinfitr) #devtools::install_github('mathesong/kinfitr')
library(tidyverse)
library(knitr)
library(kableExtra)
library(mgcv)
library(ggplot2)
#Graphics theme
theme_set(theme_light())
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 100 # number of data points
t <- seq(0,4*pi,,100)
a <- 3
b <- 2
c.norm <- rnorm(n,mean = 0,sd = 1)
amp <- 2
# generate data and calculate "y"
set.seed(5)
y.even <- a*sin(b*t)+c.norm*amp # Gaussian/normal error
dat <- tibble(y.even = y.even, t = t)
plot(t, y.even, ylim = c(-10,10) ,  xlab = 'time',ylab = 'y' )
plot(function(t) a*sin(b*t),add = T, xlim = c(0,max(t)))
legend("top", legend=c("true"), col=c("black") , lty=1, bty="n", cex = 0.8)
fit <- mgcv::gam(data = dat,formula = (y.even ~ s(t,bs = 'cr', k = length(t) )))
dat$fit.pred <- as.numeric(predict(fit))
# plot results
plot(t, y.even, ylim = c(-10,10) ,  xlab = 'time',ylab = 'y' )
plot(function(t) a*sin(b*t),add = T, xlim = c(0,max(t)))
points(dat$t,dat$fit.pred,type = 'l',col = 'blue')
legend("top", legend=c("true","spline with max knots"), col=c("black","blue") , lty=1, bty="n", cex = 0.8)
dat <- readRDS(file = './DerivedData/cimbi36_reftac.rds')
set.seed(10)
dat$y.noise <- dat$y + rnorm(length(dat$y), 0,1)
dat$y.noise[1] <- 0
plot(dat$t,dat$y, t = 'l', ylim = c(0,15), xlab = 'time', ylab = 'tac' )
points(dat$t,dat$y.noise)
legend("top", legend=c("true tac"), col=c("black") , lty=1, bty="n", cex = 0.8)
fit <- mgcv::gam(data = dat,formula = (y.noise ~ s(t,bs = 'cr',k = 30) ) )
lambda.overfit <- as.numeric(fit$sp )
dat$pred <- as.numeric(predict(fit))
plot(dat$t,dat$y, t = 'l', ylim = c(0,15), xlab = 'time', ylab = 'tac' )
points(dat$t,dat$y.noise)
points(dat$t, dat$pred, type = 'l', col = 'blue')
legend(x = 55,y = 14, legend=c("true", "spline with max knots and CV lambda"), col=c("black","blue"), lty=1, bty="n", cex = 0.85)
fit <- mgcv::gam(data = dat,formula = (y.noise ~ s(t,bs = 'cr',k = 30) ), sp = 1e6)
dat$pred <- as.numeric(predict(fit))
plot(dat$t,dat$y, t = 'l', ylim = c(0,15), xlab = 'time', ylab = 'tac' )
points(dat$t,dat$y.noise)
points(dat$t, dat$pred, type = 'l', col = 'blue')
legend(x = 55,y = 14, legend=c("true", "spline with max knots"), col=c("black","blue"), lty=1, bty="n", cex = 0.85)
lamda.grid <- 0.0001 * 10^(seq(0,10,length.out = 100) )
knot.grid <- seq(from = 5, to = 30, by = 1 )
RSS.out <- readRDS(file = './DerivedData/RSS_for_heatmap.rds')
plot( log(lamda.grid), as.numeric(RSS.out[,26]), ylab = 'loo-RSS', xlab = 'log lambda')
lambda.knot30 <- lamda.grid[which.min(as.numeric(RSS.out[,26]))]
heatmap(log(log(RSS.out)),  Colv=NA, Rowv=NA, scale='none')
RSS.min.idx <- which(RSS.out == min(RSS.out), arr.ind = TRUE)
sp <- lamda.grid[RSS.min.idx[1]]
knots <- knot.grid[ RSS.min.idx[2] ]
#get the CV-loo knot and lambda spline
gam.fit <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = knots)),
sp= sp,
data = dat)
#get the CV-loo on lambda at max knot spline
gam.fit.maxknots <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = 30)),
data = dat)
plot(dat$t,dat$y, type = 'l', ylim = c(0,14),xlab = 'time',ylab = 'tac'  )
points(dat$t,predict(gam.fit.maxknots), type = 'l' , col = 'blue')
points(dat$t,predict(gam.fit), type = 'l' , col = 'red')
points(dat$t,dat$y.noise, col = 'grey')
legend(x = 55,y = 14, legend=c("true","spline CV knots and lambda", "spline with max knots and CV lambda"), col=c("black",'red',"blue"), lty=1, bty="n", cex = 0.85)
dat <- readRDS(file = './DerivedData/cimbi36_reftac_rapidInflux.rds')
set.seed(2)
dat$y.noise <- dat$y + rnorm(length(dat$y),0,1)
dat$y.noise[1] <- 0
plot(dat$t,dat$y, type = 'l')
points(dat$t,dat$y.noise)
legend("top", legend=c("true"), col=c("black") , lty=1, bty="n", cex = 0.8)
#get the CV-loo on lambda at max knot spline
gam.fit.maxknots <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = 30)),
data = dat)
plot(dat$t,dat$y, type = 'l', ylim = c(0,25),xlab = 'time',ylab = 'tac'  )
#points(dat$t,predict(gam.fit), type = 'l' , col = 'red')
points(dat$t,predict(gam.fit.maxknots), type = 'l' , col = 'blue')
points(dat$t,dat$y.noise, col = 'grey')
legend(x = 65,y = 24, legend=c("true", "spline build-in fun max knots"), col=c("black","blue"), lty=1, bty="n", cex = 0.75)
dat.exl <- dplyr::filter(dat, t != 0)
#get the CV-loo on lambda at max knot spline
gam.fit.maxknots <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = 30)),
data = dat.exl)
plot(dat$t,dat$y, type = 'l', ylim = c(0,25),xlab = 'time',ylab = 'tac'  )
#points(dat$t,predict(gam.fit), type = 'l' , col = 'red')
points(dat.exl$t,predict(gam.fit.maxknots), type = 'l' , col = 'blue')
points(dat$t,dat$y.noise, col = 'grey')
legend(x = 65,y = 24, legend=c("true", "spline build-in fun max knots"), col=c("black","blue"), lty=1, bty="n", cex = 0.75)
RSS.out <-readRDS(file = './DerivedData/RSS_for_heatmap_rapidInflux.rds')
heatmap(log((RSS.out)),  Colv=NA, Rowv=NA, scale='none')
RSS.min.idx <- which(RSS.out == min(RSS.out), arr.ind = TRUE)
sp <- lamda.grid[RSS.min.idx[1]]
knots <- knot.grid[ RSS.min.idx[2] ]
RSS.min.idx
RSS.min.idx
RSS.out
RSS.out[1:100,30]
RSS.out[1:100,29]
RSS.out[1:10,29]
RSS.out[10,29]
RSS.out[10;29]
RSS.out[10]
RSS.out[1:100]
RSS.out
RSS.out[1:10,1:10]
RSS.out[1:10,10]
RSS.out[1:100,10]
RSS.out[1:100,29:30]
RSS.out[1:100,1]
RSS.out[1:100,2]
RSS.out[1:100,24]
RSS.out[1:100,28]
RSS.out[1:100,25]
RSS.out[1:100,26]
RSS.out[1:100,26]
which.min(RSS.out[1:100,26])
min(RSS.out[1:100,26])
min(RSS.out[1:100,1])
#get the CV-loo knot and lambda spline
gam.fit <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = knots)),
sp= sp,
data = dat)
#get the CV-loo on lambda at max knot spline
gam.fit.maxknots <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = 30)),
data = dat)
plot(dat$t,dat$y, type = 'l', ylim = c(0,25),xlab = 'time',ylab = 'tac'  )
points(dat$t,predict(gam.fit), type = 'l' , col = 'red')
points(dat$t,predict(gam.fit.maxknots), type = 'l' , col = 'blue')
points(dat$t,dat$y.noise, col = 'grey')
legend(x = 65,y = 24, legend=c("true","spline CV knots and lambda", "spline build-in fun max knots"), col=c("black",'red',"blue"), lty=1, bty="n", cex = 0.75)
plot(dat$t,dat$y, type = 'l', ylim = c(0,25),xlab = 'time',ylab = 'tac'  )
#get the CV-loo knot and lambda spline
gam.fit <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = knots)),
sp= sp,
data = dat.exl)
#get the CV-loo on lambda at max knot spline
gam.fit.maxknots <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = 30)),
data = dat.exl)
plot(dat$t,dat$y, type = 'l', ylim = c(0,25),xlab = 'time',ylab = 'tac'  )
points(dat.exl$t,predict(gam.fit), type = 'l' , col = 'red')
points(dat.exl$t,predict(gam.fit.maxknots), type = 'l' , col = 'blue')
points(dat$t,dat$y.noise, col = 'grey')
legend(x = 65,y = 24, legend=c("true","spline CV knots and lambda", "spline build-in fun max knots"), col=c("black",'red',"blue"), lty=1, bty="n", cex = 0.75)
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 100 # number of data points
t <- seq(0,4*pi,,100)
a <- 3
b <- 2
c.norm <- rnorm(n,mean = 0,sd = 1)
amp <- 2
# generate data and calculate "y"
set.seed(1)
y.even <- a*sin(b*t)+c.norm*amp # Gaussian/normal error
dat <- tibble(y.even = y.even, t = t)
plot(t, y.even, ylim = c(-10,10) ,  xlab = 'time',ylab = 'y' )
plot(function(t) a*sin(b*t),add = T, xlim = c(0,max(t)))
legend("top", legend=c("true"), col=c("black") , lty=1, bty="n", cex = 0.8)
fit <- mgcv::gam(data = dat,formula = (y.even ~ s(t,bs = 'cr', k = length(t) )))
dat$fit.pred <- as.numeric(predict(fit))
# plot results
plot(t, y.even, ylim = c(-10,10) ,  xlab = 'time',ylab = 'y' )
plot(function(t) a*sin(b*t),add = T, xlim = c(0,max(t)))
points(dat$t,dat$fit.pred,type = 'l',col = 'blue')
legend("top", legend=c("true","spline with max knots"), col=c("black","blue") , lty=1, bty="n", cex = 0.8)
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 100 # number of data points
t <- seq(0,4*pi,,100)
a <- 3
b <- 2
c.norm <- rnorm(n,mean = 0,sd = 1)
amp <- 2
# generate data and calculate "y"
set.seed(2)
y.even <- a*sin(b*t)+c.norm*amp # Gaussian/normal error
dat <- tibble(y.even = y.even, t = t)
plot(t, y.even, ylim = c(-10,10) ,  xlab = 'time',ylab = 'y' )
plot(function(t) a*sin(b*t),add = T, xlim = c(0,max(t)))
legend("top", legend=c("true"), col=c("black") , lty=1, bty="n", cex = 0.8)
fit <- mgcv::gam(data = dat,formula = (y.even ~ s(t,bs = 'cr', k = length(t) )))
dat$fit.pred <- as.numeric(predict(fit))
# plot results
plot(t, y.even, ylim = c(-10,10) ,  xlab = 'time',ylab = 'y' )
plot(function(t) a*sin(b*t),add = T, xlim = c(0,max(t)))
points(dat$t,dat$fit.pred,type = 'l',col = 'blue')
legend("top", legend=c("true","spline with max knots"), col=c("black","blue") , lty=1, bty="n", cex = 0.8)
RSS.out <-readRDS(file = './DerivedData/RSS_for_heatmap_rapidInflux.rds')
heatmap(log(log(RSS.out)),  Colv=NA, Rowv=NA, scale='none')
RSS.min.idx <- which(RSS.out == min(RSS.out), arr.ind = TRUE)
sp <- lamda.grid[RSS.min.idx[1]]
knots <- knot.grid[ RSS.min.idx[2] ]
RSS.out <-readRDS(file = './DerivedData/RSS_for_heatmap_rapidInflux.rds')
heatmap(log((RSS.out)),  Colv=NA, Rowv=NA, scale='none')
RSS.min.idx <- which(RSS.out == min(RSS.out), arr.ind = TRUE)
sp <- lamda.grid[RSS.min.idx[1]]
knots <- knot.grid[ RSS.min.idx[2] ]
RSS.out <-readRDS(file = './DerivedData/RSS_for_heatmap_rapidInflux.rds')
heatmap(log(log(RSS.out)),  Colv=NA, Rowv=NA, scale='none')
RSS.min.idx <- which(RSS.out == min(RSS.out), arr.ind = TRUE)
sp <- lamda.grid[RSS.min.idx[1]]
knots <- knot.grid[ RSS.min.idx[2] ]
log(5)
exp(5)
#get the CV-loo knot and lambda spline
gam.fit <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = knots)),
sp= sp,
data = dat)
#knitr::opts_chunk$set(echo = FALSE) #'echo = False' hides *all* code chunks below when knitted
knitr::opts_chunk$set(warning = FALSE) #'warning = F' hides *all* warnings messages below when knitted
knitr::opts_chunk$set(message = FALSE) #'message = F' hides *all* messages below when knitted
#set path to the parent folder of the project
knitr::opts_knit$set(root.dir = normalizePath("/Users/pontus.sigray/Github/spline_stuff/"))
#load packages (install from CRAN unless otherwise specified)
library(kinfitr) #devtools::install_github('mathesong/kinfitr')
library(tidyverse)
library(knitr)
library(kableExtra)
library(mgcv)
library(ggplot2)
#Graphics theme
theme_set(theme_light())
### Equation: y=a*sin(b*t)+c.unif*amp
# variables
n <- 100 # number of data points
t <- seq(0,4*pi,,100)
a <- 3
b <- 2
c.norm <- rnorm(n,mean = 0,sd = 1)
amp <- 2
# generate data and calculate "y"
set.seed(2)
y.even <- a*sin(b*t)+c.norm*amp # Gaussian/normal error
dat <- tibble(y.even = y.even, t = t)
plot(t, y.even, ylim = c(-10,10) ,  xlab = 'time',ylab = 'y' )
plot(function(t) a*sin(b*t),add = T, xlim = c(0,max(t)))
legend("top", legend=c("true"), col=c("black") , lty=1, bty="n", cex = 0.8)
fit <- mgcv::gam(data = dat,formula = (y.even ~ s(t,bs = 'cr', k = length(t) )))
dat$fit.pred <- as.numeric(predict(fit))
# plot results
plot(t, y.even, ylim = c(-10,10) ,  xlab = 'time',ylab = 'y' )
plot(function(t) a*sin(b*t),add = T, xlim = c(0,max(t)))
points(dat$t,dat$fit.pred,type = 'l',col = 'blue')
legend("top", legend=c("true","spline with max knots"), col=c("black","blue") , lty=1, bty="n", cex = 0.8)
dat <- readRDS(file = './DerivedData/cimbi36_reftac.rds')
set.seed(10)
dat$y.noise <- dat$y + rnorm(length(dat$y), 0,1)
dat$y.noise[1] <- 0
plot(dat$t,dat$y, t = 'l', ylim = c(0,15), xlab = 'time', ylab = 'tac' )
points(dat$t,dat$y.noise)
legend("top", legend=c("true tac"), col=c("black") , lty=1, bty="n", cex = 0.8)
fit <- mgcv::gam(data = dat,formula = (y.noise ~ s(t,bs = 'cr',k = 30) ) )
lambda.overfit <- as.numeric(fit$sp )
dat$pred <- as.numeric(predict(fit))
plot(dat$t,dat$y, t = 'l', ylim = c(0,15), xlab = 'time', ylab = 'tac' )
points(dat$t,dat$y.noise)
points(dat$t, dat$pred, type = 'l', col = 'blue')
legend(x = 55,y = 14, legend=c("true", "spline with max knots and CV lambda"), col=c("black","blue"), lty=1, bty="n", cex = 0.85)
fit <- mgcv::gam(data = dat,formula = (y.noise ~ s(t,bs = 'cr',k = 30) ), sp = 1e6)
dat$pred <- as.numeric(predict(fit))
plot(dat$t,dat$y, t = 'l', ylim = c(0,15), xlab = 'time', ylab = 'tac' )
points(dat$t,dat$y.noise)
points(dat$t, dat$pred, type = 'l', col = 'blue')
legend(x = 55,y = 14, legend=c("true", "spline with max knots"), col=c("black","blue"), lty=1, bty="n", cex = 0.85)
lamda.grid <- 0.0001 * 10^(seq(0,10,length.out = 100) )
knot.grid <- seq(from = 5, to = 30, by = 1 )
RSS.out <- readRDS(file = './DerivedData/RSS_for_heatmap.rds')
plot( log(lamda.grid), as.numeric(RSS.out[,26]), ylab = 'loo-RSS', xlab = 'log lambda')
lambda.knot30 <- lamda.grid[which.min(as.numeric(RSS.out[,26]))]
heatmap(log(log(RSS.out)),  Colv=NA, Rowv=NA, scale='none')
RSS.min.idx <- which(RSS.out == min(RSS.out), arr.ind = TRUE)
sp <- lamda.grid[RSS.min.idx[1]]
knots <- knot.grid[ RSS.min.idx[2] ]
#get the CV-loo knot and lambda spline
gam.fit <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = knots)),
sp= sp,
data = dat)
#get the CV-loo on lambda at max knot spline
gam.fit.maxknots <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = 30)),
data = dat)
plot(dat$t,dat$y, type = 'l', ylim = c(0,14),xlab = 'time',ylab = 'tac'  )
points(dat$t,predict(gam.fit.maxknots), type = 'l' , col = 'blue')
points(dat$t,predict(gam.fit), type = 'l' , col = 'red')
points(dat$t,dat$y.noise, col = 'grey')
legend(x = 55,y = 14, legend=c("true","spline CV knots and lambda", "spline with max knots and CV lambda"), col=c("black",'red',"blue"), lty=1, bty="n", cex = 0.85)
gam.fit
dat
#get the CV-loo knot and lambda spline
gam.fit <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = knots)),
sp= sp,
data = dat)
#get the CV-loo on lambda at max knot spline
gam.fit.maxknots <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = 30)),
data = dat)
plot(dat$t,dat$y, type = 'l', ylim = c(0,14),xlab = 'time',ylab = 'tac'  )
points(dat$t,predict(gam.fit.maxknots), type = 'l' , col = 'blue')
points(dat$t,predict(gam.fit), type = 'l' , col = 'red')
points(dat$t,dat$y.noise, col = 'grey')
legend(x = 55,y = 14, legend=c("true","spline CV knots and lambda", "spline with max knots and CV lambda"), col=c("black",'red',"blue"), lty=1, bty="n", cex = 0.85)
dat.save <- dat
plot(dat.save$t,dat.save$y)
plot(dat.save$t,dat.save$y.noise)
plot(dat.save$t,dat.save$y, type = 'l')
plot(dat.save$t,dat.save$y.noise)
plot(dat.save$t,dat.save$y, type = 'l')
plot(dat.save$t,dat.save$pred, type = 'red')
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred, type = 'red')
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred, color = 'red')
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred, type = 'l',col = 'red')
#get the CV-loo knot and lambda spline
gam.fit <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = knots)),
sp= sp,
data = dat)
#get the CV-loo on lambda at max knot spline
gam.fit.maxknots <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = 30)),
data = dat)
plot(dat$t,dat$y, type = 'l', ylim = c(0,14),xlab = 'time',ylab = 'tac'  )
points(dat$t,predict(gam.fit.maxknots), type = 'l' , col = 'blue')
points(dat$t,predict(gam.fit), type = 'l' , col = 'red')
points(dat$t,dat$y.noise, col = 'grey')
legend(x = 55,y = 14, legend=c("true","spline CV knots and lambda", "spline with max knots and CV lambda"), col=c("black",'red',"blue"), lty=1, bty="n", cex = 0.85)
dat.save <- dat
dat.save$pred <- predict(gam.fit)
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred, type = 'l',col = 'red')
knot.placement <- gam.fit$smooth[[1]]$xp
#get the CV-loo knot and lambda spline
gam.fit <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = knots)),
sp= sp,
data = dat)
#get the CV-loo on lambda at max knot spline
gam.fit.maxknots <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = 30)),
data = dat)
plot(dat$t,dat$y, type = 'l', ylim = c(0,14),xlab = 'time',ylab = 'tac'  )
points(dat$t,predict(gam.fit.maxknots), type = 'l' , col = 'blue')
points(dat$t,predict(gam.fit), type = 'l' , col = 'red')
points(dat$t,dat$y.noise, col = 'grey')
legend(x = 55,y = 14, legend=c("true","spline CV knots and lambda", "spline with max knots and CV lambda"), col=c("black",'red',"blue"), lty=1, bty="n", cex = 0.85)
dat.save <- dat
dat.save$pred <- predict(gam.fit)
knot.placement <- gam.fit$smooth[[1]]$xp
knot.placement
#get the CV-loo knot and lambda spline
gam.fit <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = knots)),
sp= sp,
data = dat)
#get the CV-loo on lambda at max knot spline
gam.fit.maxknots <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = 30)),
data = dat)
plot(dat$t,dat$y, type = 'l', ylim = c(0,14),xlab = 'time',ylab = 'tac'  )
points(dat$t,predict(gam.fit.maxknots), type = 'l' , col = 'blue')
points(dat$t,predict(gam.fit), type = 'l' , col = 'red')
points(dat$t,dat$y.noise, col = 'grey')
legend(x = 55,y = 14, legend=c("true","spline CV knots and lambda", "spline with max knots and CV lambda"), col=c("black",'red',"blue"), lty=1, bty="n", cex = 0.85)
dat.save <- dat
dat.save$pred.optimal <- predict(gam.fit)
knot.placement.optimal <- gam.fit$smooth[[1]]$xp
knot.placement.40knots <- gam.fit.maxknots$smooth[[1]]$xp
#get the CV-loo knot and lambda spline
gam.fit <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = knots)),
sp= sp,
data = dat)
#get the CV-loo on lambda at max knot spline
gam.fit.maxknots <- mgcv::gam(formula = (y.noise ~ s(t , bs = 'cr', k = 30)),
data = dat)
plot(dat$t,dat$y, type = 'l', ylim = c(0,14),xlab = 'time',ylab = 'tac'  )
points(dat$t,predict(gam.fit.maxknots), type = 'l' , col = 'blue')
points(dat$t,predict(gam.fit), type = 'l' , col = 'red')
points(dat$t,dat$y.noise, col = 'grey')
legend(x = 55,y = 14, legend=c("true","spline CV knots and lambda", "spline with max knots and CV lambda"), col=c("black",'red',"blue"), lty=1, bty="n", cex = 0.85)
dat.save <- dat
dat.save$pred.optimal <- predict(gam.fit)
knot.placement.optimal <- gam.fit$smooth[[1]]$xp
knot.placement.30knots <- gam.fit.maxknots$smooth[[1]]$xp
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred.optimal, type = 'l',col = 'red')
abline(knot.placement.30knots, type = 2)
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred.optimal, type = 'l',col = 'red')
abline(knot.placement.30knots, lty = 2)
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred.optimal, type = 'l',col = 'red')
abline(v = knot.placement.30knots, lty = 2)
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred.optimal, type = 'l',col = 'red')
abline(v = knot.placement.optimal, lty = 2)
par(mfrow = c(2,1) )
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred.optimal, type = 'l',col = 'red')
abline(v = knot.placement.optimal, lty = 2)
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred, type = 'l',col = 'blue')
abline(v = knot.placement, lty = 2)
par(mfrow = c(1,2) )
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred.optimal, type = 'l',col = 'red')
abline(v = knot.placement.optimal, lty = 2)
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred, type = 'l',col = 'blue')
abline(v = knot.placement, lty = 2)
par(mfrow = c(2,1) )
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred.optimal, type = 'l',col = 'red')
abline(v = knot.placement.optimal, lty = 2)
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred, type = 'l',col = 'blue')
abline(v = knot.placement, lty = 2)
knot.placement
par(mfrow = c(2,1) )
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred.optimal, type = 'l',col = 'red')
abline(v = knot.placement.optimal, lty = 2)
plot(dat.save$t,dat.save$y.noise)
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred, type = 'l',col = 'blue')
abline(v = knot.placement.30knots, lty = 2)
par(mfrow = c(2,1) )
plot(dat.save$t,dat.save$y.noise, xlab = 'time', ylab = 'tac')
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred.optimal, type = 'l',col = 'red')
abline(v = knot.placement.optimal, lty = 2)
plot(dat.save$t,dat.save$y.noise, xlab = 'time', ylab = 'tac')
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred, type = 'l',col = 'blue')
abline(v = knot.placement.30knots, lty = 2)
par(mfrow = c(2,1) )
plot(dat.save$t,dat.save$y.noise, xlab = 'time', ylab = 'tac')
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred.optimal, type = 'l',col = 'red')
abline(v = knot.placement.optimal, lty = 2)
plot(dat.save$t,dat.save$y.noise, xlab = 'time', ylab = 'tac')
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred, type = 'l',col = 'blue')
abline(v = knot.placement.30knots, lty = 2)
par(mfrow = c(2,1) )
plot(dat.save$t,dat.save$y.noise, xlab = 'time', ylab = 'tac')
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred.optimal, type = 'l',col = 'red')
abline(v = knot.placement.optimal, lty = 2)
plot(dat.save$t,dat.save$y.noise, xlab = 'time', ylab = 'tac')
points(dat.save$t,dat.save$y, type = 'l')
points(dat.save$t,dat.save$pred, type = 'l',col = 'blue')
abline(v = knot.placement.30knots, lty = 2)
